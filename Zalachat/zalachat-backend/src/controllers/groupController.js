import { DynamoDBDocumentClient, PutCommand, QueryCommand, UpdateCommand, DeleteCommand, ScanCommand } from "@aws-sdk/lib-dynamodb";
import { dynamoDBClient } from "../config/aws.js";
import AWS from "aws-sdk";
import { v4 as uuidv4 } from "uuid";

const cognitoISP = new AWS.CognitoIdentityServiceProvider({
  region: process.env.AWS_REGION,
});

export const createGroup = async (req, res) => {
  console.log("G·ªçi API POST /api/groups v·ªõi body:", JSON.stringify(req.body, null, 2));
  const accessToken = req.headers.authorization?.split(" ")[1];
  const { name, memberIds } = req.body;

  if (!accessToken || !name || !memberIds || !Array.isArray(memberIds) || memberIds.length === 0) {
    console.log("Thi·∫øu th√¥ng tin ƒë·∫ßu v√†o:", { accessToken, name, memberIds });
    return res.status(400).json({ error: "Access token, group name, and at least one member ID are required" });
  }

  try {
    console.log("X√°c th·ª±c token v·ªõi Cognito...");
    const userData = await cognitoISP.getUser({ AccessToken: accessToken }).promise();
    const creatorId = userData.Username;
    console.log("Ng∆∞·ªùi t·∫°o nh√≥m:", creatorId);

    console.log("Ki·ªÉm tra danh s√°ch b·∫°n b√®...");
    const friendCheck = await dynamoDBClient.send(
      new QueryCommand({
        TableName: process.env.DYNAMODB_TABLE_FRIENDS,
        KeyConditionExpression: "userId = :uid",
        ExpressionAttributeValues: { ":uid": creatorId },
      })
    );
    const validMembers = friendCheck.Items.map((item) => item.friendId);
    console.log("Danh s√°ch b·∫°n b√® h·ª£p l·ªá:", validMembers);

    if (!memberIds.every((id) => validMembers.includes(id))) {
      console.log("L·ªói: M·ªôt s·ªë memberIds kh√¥ng ph·∫£i b·∫°n b√®:", memberIds);
      return res.status(400).json({ error: "Some members are not in your friend list" });
    }

    const groupId = uuidv4();
    const members = [...new Set([creatorId, ...memberIds])].map((id) => ({
      userId: id,
      role: id === creatorId ? "admin" : "member",
    }));
    console.log("D·ªØ li·ªáu nh√≥m s·∫Ω l∆∞u:", { groupId, name, members });

    await dynamoDBClient.send(
      new PutCommand({
        TableName: process.env.DYNAMODB_TABLE_GROUPS,
        Item: {
          groupId,
          name,
          creatorId,
          members,
          createdAt: new Date().toISOString(),
        },
      })
    );
    console.log("L∆∞u nh√≥m th√†nh c√¥ng:", groupId);

    members.forEach((member) => {
      console.log(`Ph√°t s·ª± ki·ªán groupCreated cho user ${member.userId}`);
      global.io.to(member.userId).emit("groupCreated", { groupId, name, members });
    });

    res.json({ groupId, name, members });
  } catch (error) {
    console.error("L·ªói t·∫°o nh√≥m:", error);
    res.status(500).json({ error: "Failed to create group" });
  }
};

export const getGroups = async (req, res) => {
  console.log("G·ªçi API GET /api/groups");
  const accessToken = req.headers.authorization?.split(" ")[1];

  if (!accessToken) {
    console.log("Thi·∫øu access token");
    return res.status(401).json({ error: "Access token is required" });
  }

  try {
    console.log("X√°c th·ª±c token v·ªõi Cognito...");
    const userData = await cognitoISP.getUser({ AccessToken: accessToken }).promise();
    const userId = userData.Username;
    console.log("Ng∆∞·ªùi d√πng:", userId);

    const groupData = await dynamoDBClient.send(
      new ScanCommand({
        TableName: process.env.DYNAMODB_TABLE_GROUPS,
        ConsistentRead: true,
      })
    );
    console.log("K·∫øt qu·∫£ qu√©t Groups:", JSON.stringify(groupData.Items, null, 2));

    const filteredGroups = groupData.Items.filter((group) =>
      group.members?.some((member) => member.userId === userId)
    );

    const formattedGroups = filteredGroups.map((group) => ({
      groupId: group.groupId,
      name: group.name,
      creatorId: group.creatorId,
      members: group.members,
      createdAt: group.createdAt,
    }));

    console.log("Nh√≥m sau khi l·ªçc:", JSON.stringify(formattedGroups, null, 2));
    res.json(formattedGroups);
  } catch (error) {
    console.error("L·ªói l·∫•y danh s√°ch nh√≥m:", error);
    res.status(500).json({ error: "Failed to fetch groups" });
  }
};

export const getGroupMembers = async (req, res) => {
  console.log("G·ªçi API GET /api/groups/:groupId/members v·ªõi groupId:", req.params.groupId);
  const accessToken = req.headers.authorization?.split(" ")[1];
  const { groupId } = req.params;

  if (!accessToken) {
    console.log("Thi·∫øu access token");
    return res.status(401).json({ error: "Access token is required" });
  }

  if (!groupId) {
    console.log("Thi·∫øu groupId");
    return res.status(400).json({ error: "Group ID is required" });
  }

  try {
    console.log("X√°c th·ª±c token v·ªõi Cognito...");
    const userData = await cognitoISP.getUser({ AccessToken: accessToken }).promise();
    const userId = userData.Username;
    console.log("Ng∆∞·ªùi d√πng:", userId);

    console.log("L·∫•y th√¥ng tin nh√≥m t·ª´ DynamoDB...");
    const groupData = await dynamoDBClient.send(
      new QueryCommand({
        TableName: process.env.DYNAMODB_TABLE_GROUPS,
        KeyConditionExpression: "groupId = :gid",
        ExpressionAttributeValues: { ":gid": groupId },
      })
    );

    if (!groupData.Items.length) {
      console.log("Nh√≥m kh√¥ng t·ªìn t·∫°i:", groupId);
      return res.status(404).json({ error: "Group not found" });
    }

    const group = groupData.Items[0];

    console.log("Ki·ªÉm tra quy·ªÅn truy c·∫≠p...");
    const isMember = group.members.some((m) => m.userId === userId);
    if (!isMember) {
      console.log("Ng∆∞·ªùi d√πng kh√¥ng ph·∫£i th√†nh vi√™n c·ªßa nh√≥m:", { userId, groupId });
      return res.status(403).json({ error: "You are not a member of this group" });
    }

    console.log("L·∫•y chi ti·∫øt th√†nh vi√™n t·ª´ Cognito...");
    const membersWithDetails = await Promise.all(
      group.members.map(async (member) => {
        try {
          const userDetails = await cognitoISP
            .adminGetUser({
              UserPoolId: process.env.COGNITO_USER_POOL_ID,
              Username: member.userId,
            })
            .promise();

          const name = userDetails.UserAttributes.find((attr) => attr.Name === "name")?.Value || member.userId;
          const email = userDetails.UserAttributes.find((attr) => attr.Name === "email")?.Value || "";

          return {
            userId: member.userId,
            name: name,
            email: email,
            role: member.role,
            avatar: "üë§", // Customize this if avatar data is available
          };
        } catch (error) {
          console.error(`L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi d√πng ${member.userId}:`, error);
          return {
            userId: member.userId,
            name: member.userId,
            email: "",
            role: member.role,
            avatar: "üë§",
          };
        }
      })
    );

    console.log("Danh s√°ch th√†nh vi√™n:", JSON.stringify(membersWithDetails, null, 2));
    res.json(membersWithDetails);
  } catch (error) {
    console.error("L·ªói l·∫•y danh s√°ch th√†nh vi√™n nh√≥m:", error);
    res.status(500).json({ error: "Failed to fetch group members" });
  }
};

export const addMember = async (req, res) => {
  console.log("G·ªçi API POST /api/groups/:groupId/add-member v·ªõi groupId:", req.params.groupId);
  const accessToken = req.headers.authorization?.split(" ")[1];
  const { groupId } = req.params;
  const { memberId } = req.body;

  if (!accessToken || !memberId) {
    return res.status(400).json({ error: "Access token and member ID are required" });
  }

  try {
    const userData = await cognitoISP.getUser({ AccessToken: accessToken }).promise();
    const userId = userData.Username;

    const groupData = await dynamoDBClient.send(
      new QueryCommand({
        TableName: process.env.DYNAMODB_TABLE_GROUPS,
        KeyConditionExpression: "groupId = :gid",
        ExpressionAttributeValues: { ":gid": groupId },
      })
    );

    if (!groupData.Items.length) {
      return res.status(404).json({ error: "Group not found" });
    }

    const group = groupData.Items[0];
    if (!group.members.find((m) => m.userId === userId && m.role === "admin")) {
      return res.status(403).json({ error: "Only admins can add members" });
    }

    if (group.members.find((m) => m.userId === memberId)) {
      return res.status(400).json({ error: "User is already a member" });
    }

    const updatedMembers = [...group.members, { userId: memberId, role: "member" }];

    await dynamoDBClient.send(
      new UpdateCommand({
        TableName: process.env.DYNAMODB_TABLE_GROUPS,
        Key: { groupId },
        UpdateExpression: "SET members = :members",
        ExpressionAttributeValues: { ":members": updatedMembers },
      })
    );

    res.json({ message: "Member added" });

    global.io.to(memberId).emit("groupUpdated", { groupId, newMember: memberId, members: updatedMembers });
    group.members.forEach((member) => {
      global.io.to(member.userId).emit("groupUpdated", { groupId, newMember: memberId });
    });
  } catch (error) {
    console.error("L·ªói th√™m th√†nh vi√™n:", error);
    res.status(500).json({ error: "Failed to add member" });
  }
};

export const removeMember = async (req, res) => {
  console.log("G·ªçi API POST /api/groups/:groupId/remove-member v·ªõi groupId:", req.params.groupId);
  const accessToken = req.headers.authorization?.split(" ")[1];
  const { groupId } = req.params;
  const { memberId } = req.body;

  if (!accessToken || !memberId) {
    return res.status(400).json({ error: "Access token and member ID are required" });
  }

  try {
    const userData = await cognitoISP.getUser({ AccessToken: accessToken }).promise();
    const userId = userData.Username;

    const groupData = await dynamoDBClient.send(
      new QueryCommand({
        TableName: process.env.DYNAMODB_TABLE_GROUPS,
        KeyConditionExpression: "groupId = :gid",
        ExpressionAttributeValues: { ":gid": groupId },
      })
    );

    if (!groupData.Items.length) {
      return res.status(404).json({ error: "Group not found" });
    }

    const group = groupData.Items[0];

    const isMember = group.members.some((m) => m.userId === userId);
    if (!isMember) {
      return res.status(403).json({ error: "B·∫°n kh√¥ng ph·∫£i th√†nh vi√™n c·ªßa nh√≥m n√†y" });
    }

    const isAdmin = group.members.find((m) => m.userId === userId && m.role === "admin");
    if (memberId !== userId && !isAdmin) {
      return res.status(403).json({ error: "Ch·ªâ admin m·ªõi c√≥ th·ªÉ x√≥a th√†nh vi√™n kh√°c" });
    }

    const updatedMembers = group.members.filter((m) => m.userId !== memberId);
    await dynamoDBClient.send(
      new UpdateCommand({
        TableName: process.env.DYNAMODB_TABLE_GROUPS,
        Key: { groupId },
        UpdateExpression: "SET members = :members",
        ExpressionAttributeValues: { ":members": updatedMembers },
      })
    );

    res.json({ message: "Th√†nh vi√™n ƒë√£ ƒë∆∞·ª£c x√≥a" });

    global.io.to(memberId).emit("groupUpdated", { groupId, removedMember: memberId });
    updatedMembers.forEach((member) => {
      global.io.to(member.userId).emit("groupUpdated", { groupId, removedMember: memberId });
    });
  } catch (error) {
    console.error("L·ªói x√≥a th√†nh vi√™n:", error);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ x√≥a th√†nh vi√™n" });
  }
};

export const dissolveGroup = async (req, res) => {
  console.log("G·ªçi API POST /api/groups/:groupId/dissolve v·ªõi groupId:", req.params.groupId);
  const accessToken = req.headers.authorization?.split(" ")[1];
  const { groupId } = req.params;

  if (!accessToken) {
    return res.status(400).json({ error: "Access token is required" });
  }

  try {
    const userData = await cognitoISP.getUser({ AccessToken: accessToken }).promise();
    const userId = userData.Username;

    const groupData = await dynamoDBClient.send(
      new QueryCommand({
        TableName: process.env.DYNAMODB_TABLE_GROUPS,
        KeyConditionExpression: "groupId = :gid",
        ExpressionAttributeValues: { ":gid": groupId },
      })
    );

    if (!groupData.Items.length) {
      return res.status(404).json({ error: "Group not found" });
    }

    const group = groupData.Items[0];
    if (group.creatorId !== userId) {
      return res.status(403).json({ error: "Only the creator can dissolve the group" });
    }

    await dynamoDBClient.send(
      new DeleteCommand({
        TableName: process.env.DYNAMODB_TABLE_GROUPS,
        Key: { groupId },
      })
    );

    res.json({ message: "Group dissolved" });

    group.members.forEach((member) => {
      global.io.to(member.userId).emit("groupDissolved", { groupId });
    });
  } catch (error) {
    console.error("L·ªói gi·∫£i t√°n nh√≥m:", error);
    res.status(500).json({ error: "Failed to dissolve group" });
  }
};

export const assignRole = async (req, res) => {
  console.log("G·ªçi API POST /api/groups/:groupId/assign-role v·ªõi groupId:", req.params.groupId);
  const accessToken = req.headers.authorization?.split(" ")[1];
  const { groupId } = req.params;
  const { memberId, role } = req.body;

  if (!accessToken || !memberId || !["admin", "member"].includes(role)) {
    return res.status(400).json({ error: "Access token, member ID, and valid role are required" });
  }

  try {
    const userData = await cognitoISP.getUser({ AccessToken: accessToken }).promise();
    const userId = userData.Username;

    const groupData = await dynamoDBClient.send(
      new QueryCommand({
        TableName: process.env.DYNAMODB_TABLE_GROUPS,
        KeyConditionExpression: "groupId = :gid",
        ExpressionAttributeValues: { ":gid": groupId },
      })
    );

    if (!groupData.Items.length) {
      return res.status(404).json({ error: "Group not found" });
    }

    const group = groupData.Items[0];
    if (!group.members.find((m) => m.userId === userId && m.role === "admin")) {
      return res.status(403).json({ error: "Only admins can assign roles" });
    }

    const updatedMembers = group.members.map((m) =>
      m.userId === memberId ? { ...m, role } : m
    );

    await dynamoDBClient.send(
      new UpdateCommand({
        TableName: process.env.DYNAMODB_TABLE_GROUPS,
        Key: { groupId },
        UpdateExpression: "SET members = :members",
        ExpressionAttributeValues: { ":members": updatedMembers },
      })
    );

    res.json({ message: `Role updated to ${role}` });

    group.members.forEach((member) => {
      global.io.to(member.userId).emit("groupUpdated", { groupId, updatedMember: memberId, role });
    });
  } catch (error) {
    console.error("L·ªói ph√¢n quy·ªÅn:", error);
    res.status(500).json({ error: "Failed to assign role" });
  }
};

export const getGroupMessages = async (req, res) => {
  console.log("G·ªçi API GET /api/groups/:groupId/messages v·ªõi groupId:", req.params.groupId);
  const accessToken = req.headers.authorization?.split(" ")[1];
  const { groupId } = req.params;

  if (!accessToken) {
    return res.status(401).json({ error: "Access token is required" });
  }

  try {
    const params = {
      TableName: process.env.DYNAMODB_TABLE_GROUP_MESSAGES,
      KeyConditionExpression: "groupId = :gid",
      ExpressionAttributeValues: { ":gid": groupId },
    };

    const result = await dynamoDBClient.send(new QueryCommand(params));
    res.json(result.Items || []);
  } catch (error) {
    console.error("L·ªói l·∫•y tin nh·∫Øn nh√≥m:", error);
    res.status(500).json({ error: "Failed to fetch group messages" });
  }
};